"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Verify2 = void 0;
const server_client_1 = require("@vonage/server-client");
/**
 * A class for interacting with the Vonage Verify API (Version 2).
 */
class Verify2 extends server_client_1.Client {
    constructor() {
        super(...arguments);
        /**
         * The authentication type used for this client (JWT).
         */
        this.authType = server_client_1.AuthenticationType.JWT;
    }
    /**
     * Creates a new verification request.
     *
     * @param {VerificationRequestParams} params - The parameters for the
     *  verification request.
     * @return {Request} A `Request` object containing the request ID.
     */
    async newRequest(params) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v2/verify`, server_client_1.Client.transformers.snakeCaseObjectKeys(params, true));
        return {
            requestId: resp.data.request_id,
            checkUrl: resp.data.check_url,
        };
    }
    /**
     * Checks a verification code against a verification request.
     * @param {string} requestId - The ID of the verification request.
     * @param {string} code - The verification code to check.
     * @return {string} The status of the verification code check.
     */
    async checkCode(requestId, code) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v2/verify/${requestId}`, {
            code: code,
        });
        return resp.data.status;
    }
    /**
     * Cancels a verification request.
     * @param {string} requestId - The ID of the verification request to cancel.
     * @return {boolean} `true` if the cancellation was successful.
     */
    async cancel(requestId) {
        try {
            await this.sendDeleteRequest(`${this.config.apiHost}/v2/verify/${requestId}`);
            return true;
        }
        catch (error) {
            return false;
        }
    }
}
exports.Verify2 = Verify2;
