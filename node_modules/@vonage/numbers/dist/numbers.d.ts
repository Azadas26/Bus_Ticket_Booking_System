import { AuthenticationType, Client } from '@vonage/server-client';
import { NumbersAvailableList, NumbersOwnedList, NumbersEmptyResponse, NumbersParams, NumbersOwnedFilter, NumbersSearchFilter, NumbersUpdateParams } from "./types";
/**
 * Client for buying, canceling, and searching for phone numbers.
 *
 * @example
 * Create a standalone Numbers client
 *
 * ```ts
 * import { Numbers } from '@vonage/numbers';
 *
 * const numbersClient = new Numbers({
 *  apiKey: VONAGE_API_KEY,
 *  apiSecret: VONAGE_API_SECRET
 * });
 * ```
 *
 * @example
 * Create an Numbers client from the Vonage client
 *
 * ```ts
 * import { Vonage } from '@vonage/server-client';
 *
 * const vonage = new Vonage({
 *   apiKey: VONAGE_API_KEY,
 *   apiSecret: VONAGE_API_SECRET
 * });
 *
 * const numbersClient = vonage.numbers;
 * ```
 */
export declare class Numbers extends Client {
    protected authType: AuthenticationType;
    /**
     * Buy a phone number.
     *
     * @param {NumbersParams} params - The parameters for buying a number.
     * @return {Promise<NumbersEmptyResponse>} A promise that resolves to an empty response or an error response.
     *
     * @example
     * Buy a phone number
     * ```ts
     * import { Country } from '@vonage/numbers';
     * const resp = await numbersClient.buyNumber({
     *   country: Country.US,
     *   msisdn: '15555555555'
     * });
     *
     * if (resp.errorCode) {
     *   console.log(`Error: ${resp.errorCodeLabel}`);
     * } else {
     *   console.log('Number bought successfully');
     * }
     * ```
     */
    buyNumber(params: NumbersParams): Promise<NumbersEmptyResponse>;
    /**
     * Cancel a phone number.
     *
     * @param {NumbersParams} params - The parameters for canceling a number.
     * @return {Promise<NumbersEmptyResponse>} A promise that resolves to an empty response or an error response.
     *
     * @example
     * Cancel a phone number
     *
     * ```ts
     *
     * const resp = await numbersClient.cancelNumber({
     *  msisdn: '15555555555'
     * });
     *
     * if (resp.errorCode) {
     *   console.log(`Error: ${resp.errorCodeLabel}`);
     * } else {
     *   console.log('Number cancled successfully');
     * }
     * ```
     */
    cancelNumber(params: NumbersParams): Promise<NumbersEmptyResponse>;
    /**
     * Retrieves a list of available phone numbers based on the provided filter criteria.
     *
     * @param {NumbersSearchFilter} filter - The filter criteria for searching available numbers.
     * @return {Promise<NumbersAvailableList>} A promise that resolves to a list of available phone numbers or an error response.
     *
     * @example
     * Search for available numbers that can send SMS and make voice calls
     * ```ts
     * import { Country, Feature } from '@vonage/numbers';
     *
     * const resp = await numbersClient.getAvailableNumbers({
     *   country: Country.US,
     *   features: [Feature.SMS, Feature.VOICE],
     * });
     *
     * console.log(`There are ${resp.count} numbers available`);
     *
     * for (const number of resp.numbers) {
     *   console.log(number.msisdn);
     *   console.log(number.cost);
     *   console.log(number.type);
     * }
     * ```
     */
    getAvailableNumbers(filter: NumbersSearchFilter): Promise<NumbersAvailableList>;
    /**
     * Retrieves a list of owned phone numbers based on the provided filter criteria.
     *
     * @param {NumbersOwnedFilter} [filter] - The filter criteria for searching owned numbers.
     * @return {Promise<NumbersOwnedList>} A promise that resolves to a list of owned phone numbers or an error response.
     * @example
     * Search for owned numbers
     * ```ts
     * const resp = await numbersClient.getOwnedNumbers();
     * console.log(`There are ${resp.count} numbers owned`);
     * for (const number of resp.numbers) {
     *   console.log(number.msisdn);
     *   console.log(number.type);
     * }
     * ```
     */
    getOwnedNumbers(filter?: NumbersOwnedFilter): Promise<NumbersOwnedList>;
    /**
     * Updates the settings of a phone number.
     *
     * @param {NumbersUpdateParams} [params] - The parameters for updating a phone number.
     * @return {Promise<NumbersEmptyResponse>} A promise that resolves to an empty response or an error response.
     *
     * @example
     *
     * ```ts
     * const resp = await numbersClient.updateNumber({
     *   msisdn: '15555555555',
     *   voiceCallbackType: 'app',
     *   voiceCallbackValue: 'APPLICATION_ID',
     *   voiceStatusCallback: 'https://example.com/webhooks/voice',
     * });
     *
     * if (resp.errorCode) {
     *   console.log(`Error: ${resp.errorCodeLabel}`);
     * } else {
     *   console.log('Number bought successfully');
     * }
     * ```
     */
    updateNumber(params: NumbersUpdateParams): Promise<NumbersEmptyResponse>;
}
