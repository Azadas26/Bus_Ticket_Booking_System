"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tokenGenerate = exports.validateOptions = void 0;
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const uuid_1 = require("uuid");
const errors_1 = require("./errors");
const debug_1 = __importDefault(require("debug"));
const { sign } = jsonwebtoken_1.default;
const log = (0, debug_1.default)('vonage:jwt:tokenGenerate');
/**
 * Validates the generator options and constructs the claims object.
 *
 * @param {GeneratorOptions} [opts] - The generator options.
 * @return {Claims} - The claims object.
 * @private
 */
const validateOptions = (opts) => {
    const now = parseInt((Date.now() / 1000).toString(), 10);
    const ttl = opts?.ttl || 900;
    if (opts?.ttl) {
        delete opts.ttl;
    }
    const claims = {
        ...opts,
        jti: opts?.jti || (0, uuid_1.v4)(),
        iat: opts?.issued_at || now,
        exp: opts?.exp && opts?.exp > now ? opts.exp : now + ttl,
    };
    if (opts?.subject) {
        claims.sub = opts.subject;
    }
    if (opts?.acl) {
        claims.acl = opts.acl;
    }
    return claims;
};
exports.validateOptions = validateOptions;
/**
 * Generates a JWT token.
 *
 * @param {string} applicationId - The application id.
 * @param {string | Buffer} privateKey - The private key as a string or buffer.
 * @param {GeneratorOptions} [opts] - Optional generator options.
 * @return {string} - Returns the signed JWT token.
 * @throws {MissingApplicationIdError} Throws an error if applicationId is missing.
 * @throws {MissingPrivateKeyError} Throws an error if privateKey is missing.
 * @throws {InvalidApplicationIdError} Throws an error if applicationId is not a string.
 * @throws {InvalidPrivateKeyError} Throws an error if privateKey is not a string or buffer.
 * @see {@link https://developer.vonage.com/en/getting-started/concepts/authentication#json-web-tokens}
 *
 * @example
 * Generate a JWT token with default claims.
 *
 * ```js
 * const privateKey = fs.readFileSync(__dirname + '/private.key');
 * const token = tokenGenerate(applicationId, privateKey);
 * ```
 *
 * @example
 * Generate a JWT token with custom claims.
 *
 * ```js
 * const privateKey = fs.readFileSync(__dirname + '/private.key');
 * const token = tokenGenerate(applicationId, privateKey, {
 *   subject: 'my-subject',
 *   acl: {
 *    paths: {
 *      '/*\/users\/**': {},
 *      '/*\/conversations\/**': {},
 *      '/*\/sessions\/**': {},
 *    },
 *   },
 * });
 * ```
 */
const tokenGenerate = (applicationId, privateKey, opts) => {
    log(`Application id: ${applicationId}`);
    log(`Private key: ${privateKey}`);
    if (!applicationId) {
        throw new errors_1.MissingApplicationIdError();
    }
    if (!privateKey) {
        throw new errors_1.MissingPrivateKeyError();
    }
    if (typeof applicationId !== 'string') {
        throw new errors_1.InvalidApplicationIdError();
    }
    if (typeof privateKey !== 'string' && !(privateKey instanceof Buffer)) {
        throw new errors_1.InvalidPrivateKeyError();
    }
    const claims = (0, exports.validateOptions)(opts);
    log('Claims', claims);
    claims.application_id = applicationId;
    return sign(claims, privateKey, {
        algorithm: 'RS256',
        header: { typ: 'JWT', alg: 'RS256' },
    });
};
exports.tokenGenerate = tokenGenerate;
