"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifySignature = void 0;
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const debug_1 = __importDefault(require("debug"));
const errors_1 = require("./errors");
const { verify } = jsonwebtoken_1.default;
const log = (0, debug_1.default)('vonage:jwt:verifySignature');
/**
 * Verifies a JWT token
 *
 * @function
 * @param {string} jwt - The JSON Web Token to verify.
 * @param {string | Buffer} privateKey - The private key used to verify the JWT
 *  signature.
 * @return {boolean} Returns true if the JWT signature is verified successfully,
 *  otherwise returns false.
 * @throws {MissingPrivateKeyError} Throws an error if the private key is
 *  missing.
 * @throws {InvalidPrivateKeyError} Throws an error if the private key is not
 *  a string or buffer.
 *
 * @example
 * Validate a JWT token
 *
 * ```js
 * const privateKey = fs.readFileSync('./private.key');
 * if (verifySignature(token, privateKey)) {
 *   console.log('JWT signature verified.');
 * } else {
 *   console.log('JWT signature verification failed.');
 * }
 * ```
 */
const verifySignature = (jwt, privateKey) => {
    if (!privateKey) {
        throw new errors_1.MissingPrivateKeyError();
    }
    if (typeof privateKey !== 'string' && !(privateKey instanceof Buffer)) {
        throw new errors_1.InvalidPrivateKeyError();
    }
    try {
        verify(jwt, privateKey, {
            algorithms: ['RS256', 'HS256'],
        });
        return true;
    }
    catch (error) {
        log('Error when verifying token', error);
    }
    return false;
};
exports.verifySignature = verifySignature;
