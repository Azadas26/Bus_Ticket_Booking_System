"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Input = void 0;
const enums_1 = require("../../enums");
/**
 * Represents an Input action in the Nexmo Call Control Object (NCCO) for gathering user input.
 */
class Input {
    /**
     * Create a new Input instance.
     *
     * @param {DTMFSettings} dtmf - DTMF input settings.
     * @param {SpeechSettings} speech - Speech input settings.
     * @param {string} eventUrl - URL to send events to asynchronously.
     * @param {string} eventMethod - The HTTP method used to send events.
     */
    constructor(dtmf, speech, eventUrl, eventMethod) {
        /**
         * The action type, which is always 'input'.
         */
        this.action = enums_1.NCCOActions.INPUT;
        /**
         * An array of input types ('dtmf' and/or 'speech').
         */
        this.type = [];
        /**
         * An array of URLs to send events to asynchronously.
         */
        this.eventUrl = [];
        if (dtmf) {
            this.type.push('dtmf');
            this.dtmf = dtmf;
        }
        if (speech) {
            this.type.push('speech');
            this.speech = speech;
        }
        if (eventUrl) {
            this.eventUrl = [eventUrl];
        }
        if (eventMethod) {
            this.eventMethod = eventMethod;
        }
        if (this.type.length === 0) {
            throw new TypeError('Input action must have at least either DTMF or Speech settings');
        }
    }
    /**
     * Serialize the Input action to a Nexmo Call Control Object (NCCO) format.
     *
     * @return {InputAction} - The serialized Input action.
     */
    serializeToNCCO() {
        const data = {
            action: enums_1.NCCOActions.INPUT,
            type: this.type,
        };
        if (this.dtmf) {
            data.dtmf = this.dtmf;
        }
        if (this.speech) {
            data.speech = this.speech;
        }
        if (this.eventUrl) {
            data.eventUrl = this.eventUrl;
        }
        if (this.eventMethod) {
            data.eventMethod = this.eventMethod;
        }
        return data;
    }
}
exports.Input = Input;
