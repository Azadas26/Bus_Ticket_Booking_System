"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.omit = exports.kebabCaseObjectKeys = exports.snakeCaseObjectKeys = exports.camelCaseObjectKeys = exports.transformObjectKeys = void 0;
const lodash_camelcase_1 = __importDefault(require("lodash.camelcase"));
const lodash_snakecase_1 = __importDefault(require("lodash.snakecase"));
const lodash_kebabcase_1 = __importDefault(require("lodash.kebabcase"));
const lodash_partial_1 = __importDefault(require("lodash.partial"));
const lodash_isobject_1 = __importDefault(require("lodash.isobject"));
/**
 * Transforms the keys of an object based on a provided transformation function.
 *
 * @param {TransformFunction} transformFn - The function to transform the object's keys.
 * @param {Record<string | number, unknown>} objectToTransform - The object whose keys are to be transformed.
 * @param {boolean} [deep=false] - Whether to deeply transform nested object keys.
 * @param {boolean} [preserve=false] - Whether to preserve the original object's keys.
 *
 * @return {Record<string | number, unknown>} A new object with transformed keys.
 */
const transformObjectKeys = (transformFn, objectToTransform, deep = false, preserve = false) => {
    const transformedObject = {
        ...(preserve ? objectToTransform : {}),
    };
    for (const prop in objectToTransform) {
        if (!Object.prototype.hasOwnProperty.call(objectToTransform, prop)) {
            continue;
        }
        const newKey = transformFn(prop);
        const value = objectToTransform[prop];
        if (!deep || !(0, lodash_isobject_1.default)(value)) {
            transformedObject[newKey] = value;
            continue;
        }
        if (Array.isArray(value)) {
            transformedObject[newKey] = value.map((t) => (0, lodash_isobject_1.default)(t)
                ? (0, exports.transformObjectKeys)(transformFn, t, deep, preserve)
                : t);
            continue;
        }
        transformedObject[newKey] = (0, exports.transformObjectKeys)(transformFn, value, deep, preserve);
    }
    return transformedObject;
};
exports.transformObjectKeys = transformObjectKeys;
/**
 * Transforms the keys of an object to camelCase.
 *
 * @param {Record<string | number, unknown>} objectToTransform - The object whose keys are to be transformed.
 * @param {boolean} [deep=false] - Whether to deeply transform nested object keys.
 * @param {boolean} [preserve=false] - Whether to preserve the original object's keys.
 * @return {Record<string | number, unknown>} A new object with camelCased keys.
 */
exports.camelCaseObjectKeys = (0, lodash_partial_1.default)(exports.transformObjectKeys, lodash_camelcase_1.default);
/**
 * Transforms the keys of an object to snake_case.
 *
 * @param {Record<string | number, unknown>} objectToTransform - The object whose keys are to be transformed.
 * @param {boolean} [deep=false] - Whether to deeply transform nested object keys.
 * @param {boolean} [preserve=false] - Whether to preserve the original object's keys.
 * @return {Record<string | number, unknown>} A new object with snake_cased keys.
 */
exports.snakeCaseObjectKeys = (0, lodash_partial_1.default)(exports.transformObjectKeys, lodash_snakecase_1.default);
/**
 * Transforms the keys of an object to kebab-case.
 *
 * @param {Record<string | number, unknown>} objectToTransform - The object whose keys are to be transformed.
 * @param {boolean} [deep=false] - Whether to deeply transform nested object keys.
 * @param {boolean} [preserve=false] - Whether to preserve the original object's keys.
 * @return {Record<string | number, unknown>} A new object with kebab-cased keys.
 */
exports.kebabCaseObjectKeys = (0, lodash_partial_1.default)(exports.transformObjectKeys, lodash_kebabcase_1.default);
/**
 * Omit keys from an object.
 *
 * @param {Array<string>} keys - The keys to omit.
 * @param {Record<string | number, unknown>} obj - The object from which to omit keys.
 *
 * @return {Record<string | number, unknown>} A new object with omitted keys.
 */
const omit = (keys, obj) => Object.fromEntries(Object.entries(obj)
    .filter(([key]) => !keys.includes(key)));
exports.omit = omit;
