import { Response } from 'node-fetch';
import { AuthInterface, AuthParams } from '@vonage/auth';
import { VetchResponse, VetchOptions, HTTPMethods } from '@vonage/vetch';
import { AuthenticationType } from './enums';
import * as transfomers from './transformers';
import { ConfigParams } from './types';
export declare class Client {
    /**
     * Static property containing utility transformers.
     */
    static transformers: typeof transfomers;
    /**
     * The type of authentication used for the client's requests.
     */
    protected authType?: AuthenticationType;
    /**
     * The authentication instance responsible for generating authentication headers and query parameters.
     */
    protected auth: AuthInterface;
    /**
     * Configuration settings for the client, including default hosts for various services and other request settings.
     */
    protected config: ConfigParams;
    /**
     * Creates a new instance of the Client.
     *
     * @param {AuthInterface | AuthParams} credentials - The authentication credentials or an authentication instance.
     * @param {ConfigParams} [options] - Optional configuration settings for the client.
     */
    constructor(credentials: AuthInterface | AuthParams, options?: ConfigParams);
    /**
     * Adds the appropriate authentication headers or parameters to the request based on the authentication type.
     *
     * @param {VetchOptions} request - The request options to which authentication needs to be added.
     * @return {Promise<VetchOptions>} - The request options with the added authentication.
     */
    addAuthenticationToRequest(request: VetchOptions): Promise<VetchOptions>;
    /**
     * Sends a DELETE request to the specified URL.
     *
     * @param {string} url - The URL endpoint for the DELETE request.
     * @return {Promise<VetchResponse<T>>} - The response from the DELETE request.
     */
    sendDeleteRequest<T>(url: string): Promise<VetchResponse<T>>;
    /**
     * Sends a POST request with form data to the specified URL.
     *
     * @param {string} url - The URL endpoint for the POST request.
     * @param {Record<string, string>} [payload] - Optional payload containing form data to send with the POST request.
     * @return {Promise<VetchResponse<T>>} - The response from the POST request.
     */
    sendFormSubmitRequest<T>(url: string, payload?: Record<string, string>): Promise<VetchResponse<T>>;
    /**
     * Sends a GET request to the specified URL with optional query parameters.
     *
     * @param {string} url - The URL endpoint for the GET request.
     * @param {Record<string, unknown>} [queryParams] - Optional query parameters to append to the URL. These should be compatible with Node's URLSearchParams.
     * @return {Promise<VetchResponse<T>>} - The response from the GET request.
     */
    sendGetRequest<T>(url: string, queryParams?: {
        [key: string]: unknown;
    }): Promise<VetchResponse<T>>;
    /**
     * Sends a PATCH request to the specified URL with an optional payload.
     *
     * @param {string} url - The URL endpoint for the PATCH request.
     * @param {Record<string, unknown>} [payload] - Optional payload to be sent as the body of the PATCH request.
     * @return {Promise<VetchResponse<T>>} - The response from the PATCH request.
     */
    sendPatchRequest<T>(url: string, payload?: {
        [key: string]: unknown;
    }): Promise<VetchResponse<T>>;
    /**
     * Sends a POST request to the specified URL with an optional payload.
     *
     * @param {string} url - The URL endpoint for the POST request.
     * @param {Record<string, unknown>} [payload] - Optional payload to be sent as the body of the POST request.
     * @return {Promise<VetchResponse<T>>} - The response from the POST request.
     */
    sendPostRequest<T>(url: string, payload?: {
        [key: string]: unknown;
    }): Promise<VetchResponse<T>>;
    /**
     * Sends a PUT request to the specified URL with an optional payload.
     *
     * @param {string} url - The URL endpoint for the PUT request.
     * @param {Record<string, unknown>} [payload] - Optional payload to be sent as the body of the PUT request.
     * @return {Promise<VetchResponse<T>>} - The response from the PUT request.
     */
    sendPutRequest<T>(url: string, payload?: {
        [key: string]: unknown;
    }): Promise<VetchResponse<T>>;
    /**
     * Sends a request with JSON-encoded data to the specified URL using the provided HTTP method.
     *
     * @param {HTTPMethods.POST | HTTPMethods.PATCH | HTTPMethods.PUT} method - The HTTP method to be used for the request (only POST, PATCH, or PUT are acceptable).
     * @param {string} url - The URL endpoint for the request.
     * @param {Record<string, unknown>} [payload] - Optional payload to be sent as the body of the request, JSON-encoded.
     * @return {Promise<VetchResponse<T>>} - The response from the request.
     */
    sendRequestWithData<T>(method: HTTPMethods.POST | HTTPMethods.PATCH | HTTPMethods.PUT, url: string, payload?: {
        [key: string]: unknown;
    }): Promise<VetchResponse<T>>;
    /**
     * Sends a request adding necessary headers, handling authentication, and parsing the response.
     *
     * @param {VetchOptions} request - The options defining the request, including URL, method, headers, and data.
     * @return {Promise<VetchResponse<T>>} - The parsed response from the request.
     */
    sendRequest<T>(request: VetchOptions): Promise<VetchResponse<T>>;
    /**
     * Prepares the request with necessary headers, authentication, and query parameters.
     *
     * @param {VetchOptions} request - The initial request options.
     * @return {Promise<VetchOptions>} - The modified request options.
     */
    protected prepareRequest(request: VetchOptions): Promise<VetchOptions>;
    /**
     * Prepares the body for the request based on the content type.
     *
     * @param {VetchOptions} request - The request options.
     * @return {string | undefined} - The prepared request body as a string or undefined.
     */
    protected prepareBody(request: VetchOptions): string | undefined;
    /**
     * Parses the response based on its content type.
     *
     * @template T - The expected type of the parsed response data.
     *
     * @param {VetchOptions} request - The request options.
     * @param {Response} response - The raw response from the request.
     * @return {Promise<VetchResponse<T>>} - The parsed response.
     */
    protected parseResponse<T>(request: VetchOptions, response: Response): Promise<VetchResponse<T>>;
}
